<?xml version="1.0"?>
<doc>
    <assembly>
        <name>netzmq</name>
    </assembly>
    <members>
        <member name="T:ZeroMQ.IDuplexSocket">
            <summary>
    A socket that is capable of both sending and receiving messages to and from remote endpoints.
    </summary>
        </member>
        <member name="T:ZeroMQ.IReceiveSocket">
            <summary>
    A socket that is capable of receiving messages from remote endpoints.
    </summary>
        </member>
        <member name="T:ZeroMQ.ISocket">
            <summary>
            A ZeroMQ socket that can bind to local interfaces and connect to remote endpoints.
            </summary>
        </member>
        <member name="M:ZeroMQ.ISocket.Bind(System.String)">
            
    <summary>
    Create an endpoint for accepting connections and bind it to the current socket.
    </summary>
    <param name="endpoint">
    A string consisting of a <em>transport</em> and an <em>address</em>, formatted as <c><em>transport</em>://<em>address</em></c>.
    </param>
    
    
    
  
        </member>
        <member name="M:ZeroMQ.ISocket.Connect(System.String)">
            
    <summary>
    Connect the current socket to the specified endpoint.
    </summary>
    <param name="endpoint">
    A string consisting of a <em>transport</em> and an <em>address</em>, formatted as <c><em>transport</em>://<em>address</em></c>.
    </param>
    
    
    
  
        </member>
        <member name="M:ZeroMQ.ISocket.Close">
            
    <summary>
    Destroy the current socket.
    </summary>
    <remarks>
    Any outstanding messages physically received from the network but not yet received by the application
    with Receive shall be discarded. The behaviour for discarding messages sent by the application with Send
    but not yet physically transferred to the network depends on the value of the <see cref="P:ZeroMQ.ISocket.Linger"/> socket option.
    </remarks>
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.Affinity">
            
    <summary>
    Gets or sets the I/O thread affinity for newly created connections on this socket.
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.Backlog">
            
    <summary>
    Gets or sets the maximum length of the queue of outstanding peer connections. (Default = 100 connections).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.Identity">
            
    <summary>
    Gets or sets the identity of the current socket.
    </summary>
    
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.Linger">
            
    <summary>
    Gets or sets the linger period for socket shutdown. (Default = <see cref="F:System.TimeSpan.MaxValue"/>, infinite).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.MaxMessageSize">
            
    <summary>
    Gets or sets the maximum size for inbound messages (bytes). (Default = -1, no limit).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.MulticastHops">
            
    <summary>
    Gets or sets the time-to-live field in every multicast packet sent from this socket (network hops). (Default = 1 hop).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.MulticastRate">
            
    <summary>
    Gets or sets the maximum send or receive data rate for multicast transports (kbps). (Default = 100 kbps).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.MulticastRecoveryInterval">
            
    <summary>
    Gets or sets the recovery interval for multicast transports. (Default = 10 seconds).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.ReceiveBufferSize">
            
    <summary>
    Gets or sets the underlying kernel receive buffer size for the current socket (bytes). (Default = 0, OS default).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.ReceiveHighWatermark">
            
    <summary>
    Gets or sets the high water mark for inbound messages (number of messages). (Default = 0, no limit).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.ReceiveMore">
            
    <summary>
    Gets a value indicating whether the multi-part message currently being read has more message parts to follow.
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.ReceiveTimeout">
            
    <summary>
    Gets or sets the timeout for receive operations. (Default = <see cref="F:System.TimeSpan.MaxValue"/>, infinite).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.ReconnectInterval">
            
    <summary>
    Gets or sets the initial reconnection interval. (Default = 100 milliseconds).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.ReconnectIntervalMax">
            
    <summary>
    Gets or sets the maximum reconnection interval. (Default = 0, only use <see cref="P:ZeroMQ.ISocket.ReconnectInterval"/>).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.SendBufferSize">
            
    <summary>
    Gets or sets the underlying kernel transmit buffer size for the current socket (bytes). (Default = 0, OS default).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.SendHighWatermark">
            
    <summary>
    Gets or sets the high water mark for outbound messages (number of messages). (Default = 0, no limit).
    </summary>
    
    
  
        </member>
        <member name="P:ZeroMQ.ISocket.SendTimeout">
            
    <summary>
    Gets or sets the timeout for send operations. (Default = <see cref="F:System.TimeSpan.MaxValue"/>, infinite).
    </summary>
    
    
  
        </member>
        <member name="M:ZeroMQ.IReceiveSocket.Receive">
            
    <summary>
    Receive a message (or message-part) from a remote socket in blocking mode.
    </summary>
    <returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns>
    <remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks>
    
    
  
        </member>
        <member name="M:ZeroMQ.IReceiveSocket.Receive(System.TimeSpan)">
            
    <summary>
    Receive a message (or message-part) from a remote socket in non-blocking mode.
    If the specified timeout elapses, <see cref="F:ZeroMQ.ReceiveResult.TryAgain"/> is set in <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/>,
    indicating that the receive operation should be attempted again.
    </summary>
    <param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns>
    <remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks>
    
    
  
        </member>
        <member name="E:ZeroMQ.IReceiveSocket.ReceiveReady">
            <summary>
    Occurs when at least one message may be received from the socket without blocking.
    </summary>
        </member>
        <member name="P:ZeroMQ.IReceiveSocket.ReceiveStatus">
            <summary>
    Gets the <see cref="T:ZeroMQ.ReceiveResult"/> of the last Receive operation.
    </summary>
        </member>
        <member name="T:ZeroMQ.ISendSocket">
            <summary>
    A socket that is capable of sending messages to remote endpoints.
    </summary>
        </member>
        <member name="M:ZeroMQ.ISendSocket.Send(System.Byte[])">
            
    <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in blocking mode.
    </summary>
    <param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param>
    <returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns>
    
    
    
  
        </member>
        <member name="M:ZeroMQ.ISendSocket.Send(System.Byte[],System.TimeSpan)">
            
    <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in non-blocking mode.
    If the specified timeout elapses, <see cref="F:ZeroMQ.SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary>
    <param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param>
    <param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns>
    
    
    
  
        </member>
        <member name="M:ZeroMQ.ISendSocket.SendPart(System.Byte[])">
            
    <summary>
    Queue part of a multi-part message to be sent by the socket in blocking mode. More message parts will follow.
    </summary>
    <param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param>
    <returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns>
    
    
    
  
        </member>
        <member name="M:ZeroMQ.ISendSocket.SendPart(System.Byte[],System.TimeSpan)">
            
    <summary>
    Queue part of a multi-part message to be sent by the socket in non-blocking mode. More message parts will follow.
    If the specified timeout elapses, <see cref="F:ZeroMQ.SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary>
    <param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param>
    <param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param>
    <returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns>
    
    
    
  
        </member>
        <member name="E:ZeroMQ.ISendSocket.SendReady">
            <summary>
    Occurs when at least one message may be sent via the socket without blocking.
    </summary>
        </member>
        <member name="T:ZeroMQ.IPollSet">
            <summary>
    Multiplexes input/output events in a level-triggered fashion over a set of sockets.
    </summary>
        </member>
        <member name="M:ZeroMQ.IPollSet.Poll">
            
    <summary>
    Multiplex input/output events over the contained set of sockets in blocking mode, firing
    <see cref="E:ZeroMQ.IReceiveSocket.ReceiveReady"/> or <see cref="E:ZeroMQ.ISendSocket.SendReady"/> as appropriate.
    </summary>
    
    
  
        </member>
        <member name="M:ZeroMQ.IPollSet.Poll(System.TimeSpan)">
            
    <summary>
    Multiplex input/output events over the contained set of sockets in non-blocking mode, firing
    <see cref="E:ZeroMQ.IReceiveSocket.ReceiveReady"/> or <see cref="E:ZeroMQ.ISendSocket.SendReady"/> as appropriate.
    Returns when one or more events are ready to fire or when the specified timeout elapses, whichever
    comes first.
    </summary>
    <param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param>
    
    
  
        </member>
        <member name="T:ZeroMQ.ISubscribeSocket">
            <summary>
    A socket that can subscribe to and receive data distributed by a remote publisher.
    </summary>
        </member>
        <member name="M:ZeroMQ.ISubscribeSocket.SubscribeAll">
            
    <summary>
    Subscribe to all incoming messages.
    </summary>
    
  
        </member>
        <member name="M:ZeroMQ.ISubscribeSocket.Subscribe(System.Byte[])">
            
    <summary>
    Sets a new message filter for the current socket.
    </summary>
    <param name="prefix">Prefix for subscribed messages.</param>
    
    
  
        </member>
        <member name="M:ZeroMQ.ISubscribeSocket.UnsubscribeAll">
            
    <summary>
    Remove subscription filter for all incoming messages. Other filters may remain.
    </summary>
    
  
        </member>
        <member name="M:ZeroMQ.ISubscribeSocket.Unsubscribe(System.Byte[])">
            
    <summary>
    Remove an existing filter on the current socket.
    </summary>
    <param name="prefix">An existing prefix previously established via Subscribe.</param>
    
    
  
        </member>
        <member name="T:ZeroMQ.IZmqContext">
            <summary>
            Represents a ZeroMQ context object.
            </summary>
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreateDealerSocket">
            
    <summary>
    Create a ZMQ_DEALER socket. Extends the request/reply pattern by load-balancing outgoing messages
    to all connected peers and by fair-queuing incoming messages from all connected peers.
    </summary>
    <returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_DEALER socket.</returns>
    <remarks>
    When connected to a ZMQ_REP socket, each message sent must consist of an empty message part,
    the delimiter, followed by one or more data parts.
    </remarks>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreatePairSocket">
            
    <summary>
    Create a ZMQ_PAIR socket. Unrestricted and unfiltered communication with a single remote endpoint.
    </summary>
    <returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_PAIR socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreatePublishExtSocket">
            
    <summary>
    Create a ZMQ_XPUB socket. Extends Publish socket by allowing incoming subscription messages.
    </summary>
    <returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_XPUB socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreatePublishSocket">
            
    <summary>
    Create a ZMQ_PUB socket. Publish messages to connected peers in a fan-out model.
    </summary>
    <returns>An <see cref="T:ZeroMQ.ISendSocket"/> instance for a ZMQ_PUB socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreatePullSocket">
            
    <summary>
    Create a ZMQ_PULL socket. Used by a pipeline node to receive messages from upstream pipeline nodes
    </summary>
    <returns>An <see cref="T:ZeroMQ.IReceiveSocket"/> instance for a ZMQ_PULL socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreatePushSocket">
            
    <summary>
    Create a ZMQ_PUSH socket. Used by a pipeline node to send messages to downstream pipeline nodes.
    </summary>
    <returns>An <see cref="T:ZeroMQ.ISendSocket"/> instance for a ZMQ_PUSH socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreateReplyExtSocket">
            
    <summary>
    Create a ZMQ_XREP socket. Extends the Reply socket by identity-stamping incoming messages so that
    outgoing messages can be correctly routed.
    </summary>
    <returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_XREP socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreateReplySocket">
            
    <summary>
    Create a ZMQ_REP socket. Receive requests from and sends replies to a client.
    </summary>
    <returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_REP socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreateRequestExtSocket">
            
    <summary>
    Create a ZMQ_XREQ socket. Extends the Request socket by load-balancing outgoing messages and
    fair-queuing incoming messages.
    </summary>
    <returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_XREQ socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreateRequestSocket">
            
    <summary>
    Create a ZMQ_REQ socket. Used by a client to send requests to and receive replies from a service.
    </summary>
    <returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_REQ socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreateRouterSocket">
            
    <summary>
    Create a ZMQ_ROUTER socket. Extends the request/reply pattern by fair-queuing incoming messages
    from all connected peers.
    </summary>
    <returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_DEALER socket.</returns>
    <remarks>
      <para>
      Incoming messages are prepended with a message part containing an identifier that represents the
      sending socket. When sending replies, the application must send a message part containing
      recipient's identity, followed by any remaining message parts.
      </para>
      <para>
      When connected to a ZMQ_REQ socket, received messages also contain an empty delimiter between the
      sender's identity and the message contents. The application must also include an empty delimiter
      between the recipient's identity and the message parts when sending replies.
      </para>
    </remarks>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreateSubscribeExtSocket">
            
    <summary>
    Create a ZMQ_XSUB socket. Extends Subscribe socket by allowing outgoing subscription messages to be sent.
    Set a subscription filter via <see cref="M:ZeroMQ.ISubscribeSocket.Subscribe(System.Byte[])"/> or <see cref="M:ZeroMQ.ISubscribeSocket.SubscribeAll"/>
    before connecting to a publisher.
    </summary>
    <returns>An <see cref="T:ZeroMQ.ISubscribeSocket"/> instance for a ZMQ_XSUB socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreateSubscribeSocket">
            
    <summary>
    Create a ZMQ_SUB socket. Subscribe to data distributed by a publisher. Set a subscription filter
    via <see cref="M:ZeroMQ.ISubscribeSocket.Subscribe(System.Byte[])"/> or <see cref="M:ZeroMQ.ISubscribeSocket.SubscribeAll"/>
    before connecting to a publisher.
    </summary>
    <returns>An <see cref="T:ZeroMQ.ISubscribeSocket"/> instance for a ZMQ_SUB socket.</returns>
    
    
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.CreatePollSet(System.Collections.Generic.IEnumerable{ZeroMQ.ISocket})">
            
    <summary>
    Create a concrete <see cref="T:ZeroMQ.IPollSet"/> instance over a set of sockets.
    </summary>
    <param name="sockets">
    The set of <see cref="T:ZeroMQ.ISocket"/>s to multiplex. Set <see cref="E:ZeroMQ.IReceiveSocket.ReceiveReady"/>
    and/or <see cref="E:ZeroMQ.ISendSocket.SendReady"/> as appropriate on each socket prior to calling Poll.
    </param>
    <returns>An <see cref="T:ZeroMQ.IPollSet"/> instance for a given socket set.</returns>
  
        </member>
        <member name="M:ZeroMQ.IZmqContext.Terminate">
            <!-- No matching elements were found for the following include tag --><include file="CommonDoc.xml" path="ZeroMQ/Members[@name=&quot;Terminate&quot;]/node()[name()!=&quot;exception&quot; and name!=&quot;remarks&quot;]"/>
        </member>
        <member name="T:ZeroMQ.ReceiveReadyEventArgs">
            <summary>
            Provides data for <see cref="E:ZeroMQ.IReceiveSocket.ReceiveReady"/> events.
            </summary>
        </member>
        <member name="P:ZeroMQ.ReceiveReadyEventArgs.Socket">
            <summary>
            Gets the socket that may be used to receive at least one message without blocking.
            </summary>
        </member>
        <member name="T:ZeroMQ.ReceiveResult">
            <summary>
            Specifies possible results for socket receive operations.
            </summary>
        </member>
        <member name="F:ZeroMQ.ReceiveResult.None">
            <summary>
            No receive operation has been performed.
            </summary>
        </member>
        <member name="F:ZeroMQ.ReceiveResult.Received">
            <summary>
            The receive operation returned a message that contains data.
            </summary>
        </member>
        <member name="F:ZeroMQ.ReceiveResult.TryAgain">
            <summary>
            Non-blocking mode was requested and no messages are available at the moment.
            </summary>
        </member>
        <member name="F:ZeroMQ.ReceiveResult.Interrupted">
            <summary>
            The receive operation was interrupted, likely by terminating the containing context.
            </summary>
        </member>
        <member name="T:ZeroMQ.SendReadyEventArgs">
            <summary>
            Provides data for <see cref="E:ZeroMQ.ISendSocket.SendReady"/> events.
            </summary>
        </member>
        <member name="P:ZeroMQ.SendReadyEventArgs.Socket">
            <summary>
            Gets the socket that may be used to send at least one message without blocking.
            </summary>
        </member>
        <member name="T:ZeroMQ.SendResult">
            <summary>
            Specifies possible results for socket send operations.
            </summary>
        </member>
        <member name="F:ZeroMQ.SendResult.Sent">
            <summary>
            The message was queued to be sent by the socket.
            </summary>
        </member>
        <member name="F:ZeroMQ.SendResult.TryAgain">
            <summary>
            Non-blocking mode was requested and the message cannot be sent at the moment.
            </summary>
        </member>
        <member name="F:ZeroMQ.SendResult.Interrupted">
            <summary>
            The send operation was interrupted, likely by terminating the containing context.
            </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1">
            <summary>
            Defines a fluent interface for configuring device sockets.
            </summary>
            <typeparam name="TSocket">The device socket type.</typeparam>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1.BindTo(System.String)">
            <summary>
            Configure the socket to bind to a given endpoint. See <see cref="M:ZeroMQ.Sockets.ZmqSocket.Bind(System.String)"/> for details.
            </summary>
            <param name="endpoint">A string representing the endpoint to which the socket will bind.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1.ConnectTo(System.String)">
            <summary>
            Configure the socket to connect to a given endpoint. See <see cref="M:ZeroMQ.Sockets.ZmqSocket.Connect(System.String)"/> for details.
            </summary>
            <param name="endpoint">A string representing the endpoint to which the socket will connect.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1.SetSocketOption(System.Linq.Expressions.Expression{System.Func{ZeroMQ.ISocket,System.Int32}},System.Int32)">
            <summary>
            Set an int-based socket option.
            </summary>
            <param name="property">The <see cref="T:ZeroMQ.ISocket"/> property to set.</param>
            <param name="value">The int value to assign.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1.SetSocketOption(System.Linq.Expressions.Expression{System.Func{ZeroMQ.ISocket,System.Int64}},System.Int64)">
            <summary>
            Set a long-based socket option.
            </summary>
            <param name="property">The <see cref="T:ZeroMQ.ISocket"/> property to set.</param>
            <param name="value">The long value to assign.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1.SetSocketOption(System.Linq.Expressions.Expression{System.Func{ZeroMQ.ISocket,System.UInt64}},System.UInt64)">
            <summary>
            Set a ulong-based socket option.
            </summary>
            <param name="property">The <see cref="T:ZeroMQ.ISocket"/> property to set.</param>
            <param name="value">The ulong value to assign.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1.SetSocketOption(System.Linq.Expressions.Expression{System.Func{ZeroMQ.ISocket,System.Byte[]}},System.Byte[])">
            <summary>
            Set a byte array-based socket option.
            </summary>
            <param name="property">The <see cref="T:ZeroMQ.ISocket"/> property to set.</param>
            <param name="value">The byte array value to assign.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1.SetSocketOption(System.Linq.Expressions.Expression{System.Func{ZeroMQ.ISocket,System.TimeSpan}},System.TimeSpan)">
            <summary>
            Set a <see cref="T:System.TimeSpan"/>-based socket option.
            </summary>
            <param name="property">The <see cref="T:ZeroMQ.ISocket"/> property to set.</param>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to assign.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.DeviceSocketSetupExtensions">
            <summary>
            Defines extensions to <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> objects for concrete socket types.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetupExtensions.SubscribeTo(ZeroMQ.Sockets.Devices.DeviceSocketSetup{ZeroMQ.ISubscribeSocket},System.Byte[])">
            <summary>
            Configure the socket to subscribe to a specific prefix. See <see cref="M:ZeroMQ.Sockets.SubscribeSocket.Subscribe(System.Byte[])"/> for details.
            </summary>
            <param name="setup">The <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</param>
            <param name="prefix">A byte array containing the prefix to which the socket will subscribe.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.DeviceSocketSetupExtensions.SubscribeToAll(ZeroMQ.Sockets.Devices.DeviceSocketSetup{ZeroMQ.ISubscribeSocket})">
            <summary>
            Configure the socket to subscribe to all incoming messages. See <see cref="M:ZeroMQ.Sockets.SubscribeSocket.SubscribeAll"/> for details.
            </summary>
            <param name="setup">The <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</param>
            <returns>The current <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object.</returns>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.ForwarderDevice">
            <summary>
            Collects messages from a set of publishers and forwards these to a set of subscribers.
            </summary>
            <remarks>
            Generally used to bridge networks. E.g. read on TCP unicast and forward on multicast.
            This device is part of the publish-subscribe pattern. The frontend speaks to publishers
            and the backend speaks to subscribers.
            </remarks>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ForwarderDevice.Create(ZeroMQ.IZmqContext)">
            <summary>
            Creates a new <see cref="T:ZeroMQ.Sockets.Devices.IForwarderDevice"/> that will run in the current thread.
            </summary>
            <param name="context">An <see cref="T:ZeroMQ.IZmqContext"/> for creating the frontend and backend sockets.</param>
            <returns>A thread-safe <see cref="T:ZeroMQ.Sockets.Devices.IForwarderDevice"/> object implementing the Forwarder pattern.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ForwarderDevice.CreateThreaded(ZeroMQ.IZmqContext)">
            <summary>
            Creates a new <see cref="T:ZeroMQ.Sockets.Devices.IForwarderDevice"/> that will run in a separate thread.
            </summary>
            <param name="context">An <see cref="T:ZeroMQ.IZmqContext"/> for creating the frontend and backend sockets.</param>
            <returns>A thread-safe <see cref="T:ZeroMQ.Sockets.Devices.IForwarderDevice"/> object implementing the Forwarder pattern.</returns>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.ZmqDevice`2">
            <summary>
            Forwards messages received by a front-end socket to a back-end socket, from which
            they are then sent.
            </summary>
            <typeparam name="TFrontend">The frontend socket type.</typeparam>
            <typeparam name="TBackend">The backend socket type.</typeparam>
            <remarks>
            <para>
            The base implementation of <see cref="T:ZeroMQ.Sockets.Devices.ZmqDevice`2"/>
            is <b>not</b> threadsafe. It is possible to construct a device with sockets that were
            created in separate threads or separate contexts.
            </para>
            <para>
            For this reason, the preferred way to create devices is use a factory method to construct the
            <see cref="T:ZeroMQ.Sockets.Devices.ZmqDevice`2"/> for a given <see cref="T:ZeroMQ.IZmqContext"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.IDevice`2">
            <summary>
            Represents a ZeroMQ device, connecting a frontend socket to a backend socket.
            </summary>
            <typeparam name="TFrontend">The frontend socket type.</typeparam>
            <typeparam name="TBackend">The backend socket type.</typeparam>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.IDevice`2.ConfigureFrontend">
            <summary>
    Configure the frontend socket using a fluent interface.
    </summary><returns>A <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object used to define socket configuration options.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.IDevice`2.ConfigureBackend">
            <summary>
    Configure the backend socket using a fluent interface.
    </summary><returns>A <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object used to define socket configuration options.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.IDevice`2.Start">
            <summary>
            Start the device.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.IDevice`2.Join">
            <summary>
    Blocks the calling thread until the device terminates.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.IDevice`2.Join(System.TimeSpan)">
            <summary>
    Blocks the calling thread until the device terminates or the specified time elapses.
    </summary><param name="timeout">
    A <see cref="T:System.TimeSpan"/> set to the amount of time to wait for the device to terminate.
    </param><returns>
    true if the device terminated; false if the device has not terminated after
    the amount of time specified by <paramref name="timeout"/> has elapsed.
    </returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.IDevice`2.Stop">
            <summary>
    Stop the device in such a way that it can be restarted.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.IDevice`2.Close">
            <summary>
    Stop the device and terminate the underlying sockets safely.
    </summary>
        </member>
        <member name="P:ZeroMQ.Sockets.Devices.IDevice`2.IsRunning">
            <summary>
    Gets a value indicating whether the device loop is running.
    </summary>
        </member>
        <member name="F:ZeroMQ.Sockets.Devices.ZmqDevice`2.PollingIntervalMsec">
            <summary>
            The polling interval in milliseconds.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.Devices.ZmqDevice`2"/> class.
            </summary>
            <remarks>
            Derived classes must use <see cref="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Create``1(`0,`1,System.Func{`0,`1,``0})"/> to instantiate a usable device.
            </remarks>
            <param name="frontend">
            A <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> that will pass incoming messages to <paramref name="backend"/>.
            </param>
            <param name="backend">
            A <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> that will receive messages from (and optionally send replies
            to) <paramref name="frontend"/>.
            </param>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ZeroMQ.Sockets.Devices.ZmqDevice`2"/> class.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Create``1(`0,`1,System.Func{`0,`1,``0})">
            <summary>
            Creates a new instance of the <see cref="T:ZeroMQ.Sockets.Devices.ZmqDevice`2"/> class.
            </summary>
            <typeparam name="TDevice">The concrete device type.</typeparam>
            <param name="frontend">
            A <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> that will pass incoming messages to <paramref name="backend"/>.
            </param>
            <param name="backend">
            A <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> that will receive messages from (and optionally send replies
            to) <paramref name="frontend"/>.
            </param>
            <param name="deviceBuilder">A method that constructs a <typeparamref name="TDevice"/> object.</param>
            <returns>A new <see cref="T:ZeroMQ.Sockets.Devices.ZmqDevice`2"/> object for the specified sockets.</returns>
            <remarks>
            To avoid potential thread safety issues, <paramref name="frontend"/> and <paramref name="backend"/>
            must be created with the same <see cref="T:ZeroMQ.Sockets.ZmqContext"/>.
            </remarks>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.ConfigureFrontend">
            <summary>
    Configure the frontend socket using a fluent interface.
    </summary><returns>A <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object used to define socket configuration options.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.ConfigureBackend">
            <summary>
    Configure the backend socket using a fluent interface.
    </summary><returns>A <see cref="T:ZeroMQ.Sockets.Devices.DeviceSocketSetup`1"/> object used to define socket configuration options.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.InitializeSockets">
            <summary>
            Initializes the frontend and backend sockets based on the configuration specified with
            <see cref="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.ConfigureFrontend"/> and <see cref="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.ConfigureBackend"/>.
            </summary>
            <remarks>
            Called automatically when starting the device. If called multiple times, will only execute once.
            </remarks>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Start">
            <summary>
            Start the device in the current thread.
            </summary>
            <remarks>
            Initializes the sockets prior to starting the device. See <see cref="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.InitializeSockets"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:ZeroMQ.Sockets.Devices.ZmqDevice`2"/> has already been disposed.</exception>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Join">
            <summary>
    Blocks the calling thread until the device terminates.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Join(System.TimeSpan)">
            <summary>
    Blocks the calling thread until the device terminates or the specified time elapses.
    </summary><param name="timeout">
    A <see cref="T:System.TimeSpan"/> set to the amount of time to wait for the device to terminate.
    </param><returns>
    true if the device terminated; false if the device has not terminated after
    the amount of time specified by <paramref name="timeout"/> has elapsed.
    </returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Stop">
            <summary>
    Stop the device in such a way that it can be restarted.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Close">
            <summary>
    Stop the device and terminate the underlying sockets safely.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Dispose">
            <summary>
            Releases all resources used by the current instance, including the frontend and backend sockets.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Run">
            <summary>
            Start the device in the current thread. Should be used by implementations of
            the <see cref="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Start"/> method.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Dispose(System.Boolean)">
            <summary>
            Stops the device and releases the underlying sockets. Optionally disposes of managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:ZeroMQ.Sockets.Devices.ZmqDevice`2.IsRunning">
            <summary>
    Gets a value indicating whether the device loop is running.
    </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.IForwarderDevice">
            <summary>
            Collects messages from a set of publishers and forwards these to a set of subscribers.
            </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.ThreadDevice`2">
            <summary>
            A <see cref="T:ZeroMQ.Sockets.Devices.ZmqDevice`2"/> that runs in a self-managed <see cref="T:System.Threading.Thread"/>.
            </summary>
            <typeparam name="TFrontend">The frontend socket type.</typeparam>
            <typeparam name="TBackend">The backend socket type.</typeparam>
            <remarks>
            <para>
            The base implementation of <see cref="T:ZeroMQ.Sockets.Devices.ThreadDevice`2"/>
            is <b>not</b> threadsafe. It is possible to construct a device with sockets that were
            created in separate threads or separate contexts.
            </para>
            <para>
            For this reason, the preferred way to create devices is use a factory method to construct the
            <see cref="T:ZeroMQ.Sockets.Devices.ThreadDevice`2"/> for a given <see cref="T:ZeroMQ.IZmqContext"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ThreadDevice`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.Devices.ThreadDevice`2"/> class.
            </summary>
            <remarks>
            Derived classes must use <see cref="M:ZeroMQ.Sockets.Devices.ZmqDevice`2.Create``1(`0,`1,System.Func{`0,`1,``0})"/> to instantiate a usable device.
            </remarks>
            <param name="frontend">
            A <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> that will pass incoming messages to <paramref name="backend"/>.
            </param>
            <param name="backend">
            A <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> that will receive messages from (and optionally send replies
            to) <paramref name="frontend"/>.
            </param>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ThreadDevice`2.Start">
            <summary>
            Start the device in a new thread and return execution to the calling thread.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ThreadDevice`2.Join">
            <summary>
            Blocks the calling thread until the device thread terminates.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ThreadDevice`2.Join(System.TimeSpan)">
            <summary>
            Blocks the calling thread until the device thread terminates or the specified time elapses.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> set to the amount of time to wait for the device to terminate.
            </param>
            <returns>
            true if the device thread terminated; false if the device thread has not terminated after
            the amount of time specified by <paramref name="timeout"/> has elapsed.
            </returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.ThreadDevice`2.Close">
            <summary>
    Stop the device and terminate the underlying sockets safely.
    </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.IQueueDevice">
            <summary>
            A shared queue that collects requests from a set of clients and distributes
            these fairly among a set of services.
            </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.IStreamerDevice">
            <summary>
            Collects tasks from a set of pushers and forwards these to a set of pullers.
            </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.QueueDevice">
            <summary>
            A shared queue that collects requests from a set of clients and distributes
            these fairly among a set of services.
            </summary>
            <remarks>
            Requests are fair-queued from frontend connections and load-balanced between
            backend connections. Replies automatically return to the client that made the
            original request. This device is part of the request-reply pattern. The frontend
            speaks to clients and the backend speaks to services.
            </remarks>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.QueueDevice.Create(ZeroMQ.IZmqContext)">
            <summary>
            Creates a new <see cref="T:ZeroMQ.Sockets.Devices.IQueueDevice"/> that will run in the current thread.
            </summary>
            <param name="context">An <see cref="T:ZeroMQ.IZmqContext"/> for creating the frontend and backend sockets.</param>
            <returns>A thread-safe <see cref="T:ZeroMQ.Sockets.Devices.IQueueDevice"/> object implementing the Queue pattern.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.QueueDevice.CreateThreaded(ZeroMQ.IZmqContext)">
            <summary>
            Creates a new <see cref="T:ZeroMQ.Sockets.Devices.IQueueDevice"/> that will run in a separate thread.
            </summary>
            <param name="context">An <see cref="T:ZeroMQ.IZmqContext"/> for creating the frontend and backend sockets.</param>
            <returns>A thread-safe <see cref="T:ZeroMQ.Sockets.Devices.IQueueDevice"/> object implementing the Queue pattern.</returns>
        </member>
        <member name="T:ZeroMQ.Sockets.Devices.StreamerDevice">
            <summary>
            Collects tasks from a set of pushers and forwards these to a set of pullers.
            </summary>
            <remarks>
            Generally used to bridge networks. Messages are fair-queued from pushers and
            load-balanced to pullers. This device is part of the pipeline pattern. The
            frontend speaks to pushers and the backend speaks to pullers.
            </remarks>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.StreamerDevice.Create(ZeroMQ.IZmqContext)">
            <summary>
            Creates a new <see cref="T:ZeroMQ.Sockets.Devices.IStreamerDevice"/> that will run in the current thread.
            </summary>
            <param name="context">An <see cref="T:ZeroMQ.IZmqContext"/> for creating the frontend and backend sockets.</param>
            <returns>A thread-safe <see cref="T:ZeroMQ.Sockets.Devices.IStreamerDevice"/> object implementing the Streamer pattern.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.Devices.StreamerDevice.CreateThreaded(ZeroMQ.IZmqContext)">
            <summary>
            Creates a new <see cref="T:ZeroMQ.Sockets.Devices.IStreamerDevice"/> that will run in a separate thread.
            </summary>
            <param name="context">An <see cref="T:ZeroMQ.IZmqContext"/> for creating the frontend and backend sockets.</param>
            <returns>A thread-safe <see cref="T:ZeroMQ.Sockets.Devices.IStreamerDevice"/> object implementing the Streamer pattern.</returns>
        </member>
        <member name="T:ZeroMQ.Sockets.DuplexSocket">
            <summary>
    A socket that is capable of both sending and receiving messages to and from remote endpoints.
    </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.ZmqSocket">
            <summary>
            Sends and receives messages across various transports, synchronously or asynchronously.
            </summary>
            <remarks>
            The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> class defines the common behavior for derived socket types. 
            </remarks>
        </member>
        <member name="F:ZeroMQ.Sockets.ZmqSocket.EmptyMessage">
            <summary>
            An byte array containing no data.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocket.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> class.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocket.Bind(System.String)">
            <summary>
    Create an endpoint for accepting connections and bind it to the current socket.
    </summary><param name="endpoint">
    A string consisting of a <em>transport</em> and an <em>address</em>, formatted as <c><em>transport</em>://<em>address</em></c>.
    </param><exception cref="T:System.ArgumentNullException">
      <paramref name="endpoint"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred binding the socket to an endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocket.Connect(System.String)">
            <summary>
    Connect the current socket to the specified endpoint.
    </summary><param name="endpoint">
    A string consisting of a <em>transport</em> and an <em>address</em>, formatted as <c><em>transport</em>://<em>address</em></c>.
    </param><exception cref="T:System.ArgumentNullException">
      <paramref name="endpoint"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred connecting the socket to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocket.Close">
            <summary>
    Destroy the current socket.
    </summary><remarks>
    Any outstanding messages physically received from the network but not yet received by the application
    with Receive shall be discarded. The behaviour for discarding messages sent by the application with Send
    but not yet physically transferred to the network depends on the value of the <see cref="P:ZeroMQ.Sockets.ZmqSocket.Linger"/> socket option.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      The underlying socket object is not valid.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocket.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> class.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocket.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ZeroMQ.Sockets.ZmqSocket"/>, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocket.Subscribe(System.Byte[])">
            <summary>
    Sets a new message filter for the current socket.
    </summary><param name="prefix">Prefix for subscribed messages.</param><exception cref="T:System.ArgumentNullException">
      <paramref name="prefix"/> is null.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocket.Unsubscribe(System.Byte[])">
            <summary>
    Remove an existing filter on the current socket.
    </summary><param name="prefix">An existing prefix previously established via Subscribe.</param><exception cref="T:System.ArgumentNullException">
      <paramref name="prefix"/> is null.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="E:ZeroMQ.Sockets.ZmqSocket.ReceiveReady">
            <summary>
    Occurs when at least one message may be received from the socket without blocking.
    </summary>
        </member>
        <member name="E:ZeroMQ.Sockets.ZmqSocket.SendReady">
            <summary>
    Occurs when at least one message may be sent via the socket without blocking.
    </summary>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.Affinity">
            <summary>
    Gets or sets the I/O thread affinity for newly created connections on this socket.
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.Backlog">
            <summary>
    Gets or sets the maximum length of the queue of outstanding peer connections. (Default = 100 connections).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.Identity">
            <summary>
    Gets or sets the identity of the current socket.
    </summary><exception cref="T:System.ArgumentNullException">
      The identity is set to null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.Linger">
            <summary>
    Gets or sets the linger period for socket shutdown. (Default = <see cref="F:System.TimeSpan.MaxValue"/>, infinite).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.MaxMessageSize">
            <summary>
    Gets or sets the maximum size for inbound messages (bytes). (Default = -1, no limit).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.MulticastHops">
            <summary>
    Gets or sets the time-to-live field in every multicast packet sent from this socket (network hops). (Default = 1 hop).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.MulticastRate">
            <summary>
    Gets or sets the maximum send or receive data rate for multicast transports (kbps). (Default = 100 kbps).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.MulticastRecoveryInterval">
            <summary>
    Gets or sets the recovery interval for multicast transports. (Default = 10 seconds).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.ReceiveBufferSize">
            <summary>
    Gets or sets the underlying kernel receive buffer size for the current socket (bytes). (Default = 0, OS default).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.ReceiveHighWatermark">
            <summary>
    Gets or sets the high water mark for inbound messages (number of messages). (Default = 0, no limit).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.ReceiveMore">
            <summary>
    Gets a value indicating whether the multi-part message currently being read has more message parts to follow.
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.ReceiveTimeout">
            <summary>
    Gets or sets the timeout for receive operations. (Default = <see cref="F:System.TimeSpan.MaxValue"/>, infinite).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.ReconnectInterval">
            <summary>
    Gets or sets the initial reconnection interval. (Default = 100 milliseconds).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.ReconnectIntervalMax">
            <summary>
    Gets or sets the maximum reconnection interval. (Default = 0, only use <see cref="P:ZeroMQ.Sockets.ZmqSocket.ReconnectInterval"/>).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.SendBufferSize">
            <summary>
    Gets or sets the underlying kernel transmit buffer size for the current socket (bytes). (Default = 0, OS default).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.SendHighWatermark">
            <summary>
    Gets or sets the high water mark for outbound messages (number of messages). (Default = 0, no limit).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.SendTimeout">
            <summary>
    Gets or sets the timeout for send operations. (Default = <see cref="F:System.TimeSpan.MaxValue"/>, infinite).
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred when getting or setting the socket option.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqSocket.ReceiveStatus">
            <summary>
    Gets the <see cref="T:ZeroMQ.ReceiveResult"/> of the last Receive operation.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.DuplexSocket.Receive">
            <summary>
    Receive a message (or message-part) from a remote socket in blocking mode.
    </summary><returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns><remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred receiving data from a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.DuplexSocket.Receive(System.TimeSpan)">
            <summary>
    Receive a message (or message-part) from a remote socket in non-blocking mode.
    If the specified timeout elapses, <see cref="F:ZeroMQ.ReceiveResult.TryAgain"/> is set in <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/>,
    indicating that the receive operation should be attempted again.
    </summary><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns><remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred receiving data from a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.DuplexSocket.Send(System.Byte[])">
            <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in blocking mode.
    </summary><param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param><returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns><exception cref="T:System.ArgumentNullException">
      <paramref name="buffer"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred sending data to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.DuplexSocket.Send(System.Byte[],System.TimeSpan)">
            <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in non-blocking mode.
    If the specified timeout elapses, <see cref="F:ZeroMQ.SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary><param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns><exception cref="T:System.ArgumentNullException">
      <paramref name="buffer"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred sending data to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.DuplexSocket.SendPart(System.Byte[])">
            <summary>
    Queue part of a multi-part message to be sent by the socket in blocking mode. More message parts will follow.
    </summary><param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param><returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns><exception cref="T:System.ArgumentNullException">
      <paramref name="buffer"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred sending data to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.DuplexSocket.SendPart(System.Byte[],System.TimeSpan)">
            <summary>
    Queue part of a multi-part message to be sent by the socket in non-blocking mode. More message parts will follow.
    If the specified timeout elapses, <see cref="F:ZeroMQ.SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary><param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns><exception cref="T:System.ArgumentNullException">
      <paramref name="buffer"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred sending data to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="E:ZeroMQ.Sockets.DuplexSocket.ReceiveReady">
            <summary>
    Occurs when at least one message may be received from the socket without blocking.
    </summary>
        </member>
        <member name="E:ZeroMQ.Sockets.DuplexSocket.SendReady">
            <summary>
    Occurs when at least one message may be sent via the socket without blocking.
    </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.MessageBufferExtensions">
            <summary>
            Provides extension methods for conversions between message formats.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.MessageBufferExtensions.ZmqEncode(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:System.Byte"/> array suitable for transmission via sockets.
            Uses <see cref="P:ZeroMQ.Sockets.ZmqContext.DefaultEncoding"/> to perform the conversion.
            </summary>
            <param name="message">The string to convert.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the encoded string.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.MessageBufferExtensions.ZmqDecode(System.Byte[])">
            <summary>
            Converts a <see cref="T:System.Byte"/> array to a <see cref="T:System.String"/> using <see cref="P:ZeroMQ.Sockets.ZmqContext.DefaultEncoding"/>.
            </summary>
            <param name="buffer">A <see cref="T:System.Byte"/> array value containing the message to convert.</param>
            <returns>A <see cref="T:System.String"/> containing the decoded string.</returns>
        </member>
        <member name="T:ZeroMQ.Sockets.ReceiveSocket">
            <summary>
    A socket that is capable of receiving messages from remote endpoints.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ReceiveSocket.Receive">
            <summary>
    Receive a message (or message-part) from a remote socket in blocking mode.
    </summary><returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns><remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred receiving data from a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ReceiveSocket.Receive(System.TimeSpan)">
            <summary>
    Receive a message (or message-part) from a remote socket in non-blocking mode.
    If the specified timeout elapses, <see cref="F:ZeroMQ.ReceiveResult.TryAgain"/> is set in <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/>,
    indicating that the receive operation should be attempted again.
    </summary><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns><remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred receiving data from a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="E:ZeroMQ.Sockets.ReceiveSocket.ReceiveReady">
            <summary>
    Occurs when at least one message may be received from the socket without blocking.
    </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.SendSocket">
            <summary>
    A socket that is capable of sending messages to remote endpoints.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.SendSocket.Send(System.Byte[])">
            <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in blocking mode.
    </summary><param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param><returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns><exception cref="T:System.ArgumentNullException">
      <paramref name="buffer"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred sending data to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SendSocket.Send(System.Byte[],System.TimeSpan)">
            <summary>
    Queue a single-part message (or the final message-part) to be sent by the socket in non-blocking mode.
    If the specified timeout elapses, <see cref="F:ZeroMQ.SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary><param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns><exception cref="T:System.ArgumentNullException">
      <paramref name="buffer"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred sending data to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SendSocket.SendPart(System.Byte[])">
            <summary>
    Queue part of a multi-part message to be sent by the socket in blocking mode. More message parts will follow.
    </summary><param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param><returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns><exception cref="T:System.ArgumentNullException">
      <paramref name="buffer"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred sending data to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SendSocket.SendPart(System.Byte[],System.TimeSpan)">
            <summary>
    Queue part of a multi-part message to be sent by the socket in non-blocking mode. More message parts will follow.
    If the specified timeout elapses, <see cref="F:ZeroMQ.SendResult.TryAgain"/> is returned, indicating that the
    send operation should be attempted again.
    </summary><param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the message to be sent.</param><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><returns>A <see cref="T:ZeroMQ.SendResult"/> value indicating the send operation outcome.</returns><exception cref="T:System.ArgumentNullException">
      <paramref name="buffer"/> is null.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred sending data to a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="E:ZeroMQ.Sockets.SendSocket.SendReady">
            <summary>
    Occurs when at least one message may be sent via the socket without blocking.
    </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.SubscribeExtSocket">
            <summary>
    A socket that can subscribe to and receive data distributed by a remote publisher.
    Extends <see cref="T:ZeroMQ.ISubscribeSocket"/> by sending subscription messages directly to the publisher.
    </summary>
        </member>
        <member name="F:ZeroMQ.Sockets.SubscribeExtSocket.SubscribePrefix">
            <summary>
            The byte value prefixed to outgoing subscription messages.
            </summary>
        </member>
        <member name="F:ZeroMQ.Sockets.SubscribeExtSocket.UnsubscribePrefix">
            <summary>
            The byte value prefixed to outgoing unsubscription messages.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeExtSocket.Receive">
            <summary>
    Receive a message (or message-part) from a remote socket in blocking mode.
    </summary><returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns><remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred receiving data from a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeExtSocket.Receive(System.TimeSpan)">
            <summary>
    Receive a message (or message-part) from a remote socket in non-blocking mode.
    If the specified timeout elapses, <see cref="F:ZeroMQ.ReceiveResult.TryAgain"/> is set in <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/>,
    indicating that the receive operation should be attempted again.
    </summary><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns><remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred receiving data from a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeExtSocket.SubscribeAll">
            <summary>
    Subscribe to all incoming messages.
    </summary><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeExtSocket.Subscribe(System.Byte[])">
            <summary>
    Sets a new message filter for the current socket.
    </summary><param name="prefix">Prefix for subscribed messages.</param><exception cref="T:System.ArgumentNullException">
      <paramref name="prefix"/> is null.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeExtSocket.UnsubscribeAll">
            <summary>
    Remove subscription filter for all incoming messages. Other filters may remain.
    </summary><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeExtSocket.Unsubscribe(System.Byte[])">
            <summary>
    Remove an existing filter on the current socket.
    </summary><param name="prefix">An existing prefix previously established via Subscribe.</param><exception cref="T:System.ArgumentNullException">
      <paramref name="prefix"/> is null.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="E:ZeroMQ.Sockets.SubscribeExtSocket.ReceiveReady">
            <summary>
    Occurs when at least one message may be received from the socket without blocking.
    </summary>
        </member>
        <member name="E:ZeroMQ.Sockets.SubscribeExtSocket.SendReady">
            <summary>
    Occurs when at least one message may be sent via the socket without blocking.
    </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.SubscribeSocket">
            <summary>
    A socket that can subscribe to and receive data distributed by a remote publisher.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeSocket.Receive">
            <summary>
    Receive a message (or message-part) from a remote socket in blocking mode.
    </summary><returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns><remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred receiving data from a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeSocket.Receive(System.TimeSpan)">
            <summary>
    Receive a message (or message-part) from a remote socket in non-blocking mode.
    If the specified timeout elapses, <see cref="F:ZeroMQ.ReceiveResult.TryAgain"/> is set in <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/>,
    indicating that the receive operation should be attempted again.
    </summary><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><returns>A <see cref="T:System.Byte"/> array containing the data recieved. Returns a zero-length array on recoverable errors (see remarks).</returns><remarks>
      When the Receive operation is interrupted by context termination or has timed out before data is available,
      the returned byte array will be empty. Use the <see cref="P:ZeroMQ.IReceiveSocket.ReceiveStatus"/> property to distinguish
      between those recoverable errors and actual empty messages from the sender. The empty array is used here instead of
      null to avoid potential <see cref="T:System.NullReferenceException"/>s in client code.
    </remarks><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred receiving data from a remote endpoint.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeSocket.SubscribeAll">
            <summary>
    Subscribe to all incoming messages.
    </summary><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeSocket.Subscribe(System.Byte[])">
            <summary>
    Sets a new message filter for the current socket.
    </summary><param name="prefix">Prefix for subscribed messages.</param><exception cref="T:System.ArgumentNullException">
      <paramref name="prefix"/> is null.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeSocket.UnsubscribeAll">
            <summary>
    Remove subscription filter for all incoming messages. Other filters may remain.
    </summary><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.SubscribeSocket.Unsubscribe(System.Byte[])">
            <summary>
    Remove an existing filter on the current socket.
    </summary><param name="prefix">An existing prefix previously established via Subscribe.</param><exception cref="T:System.ArgumentNullException">
      <paramref name="prefix"/> is null.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqSocket"/> has been closed.
    </exception>
        </member>
        <member name="E:ZeroMQ.Sockets.SubscribeSocket.ReceiveReady">
            <summary>
    Occurs when at least one message may be received from the socket without blocking.
    </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.ZmqContext">
            <summary>
            Represents a ZeroMQ context object.
            </summary>
            <remarks>
            The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> object is a container for all sockets in a single process,
            and acts as the transport for inproc sockets. <see cref="T:ZeroMQ.Sockets.ZmqContext"/> is thread safe.
            </remarks>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ZeroMQ.Sockets.ZmqContext"/> class.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.Create">
            <summary>
            Create a concrete <see cref="T:ZeroMQ.IZmqContext"/> instance.
            </summary>
            <returns>An <see cref="T:ZeroMQ.IZmqContext"/> instance with the default thread pool size (1).</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.Create(System.Int32)">
            <summary>
            Create a concrete <see cref="T:ZeroMQ.IZmqContext"/> instance.
            </summary>
            <param name="threadPoolSize">Number of threads to use in the ZMQ thread pool.</param>
            <returns>An <see cref="T:ZeroMQ.IZmqContext"/> instance with the specified thread pool size.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreateDealerSocket">
            <summary>
    Create a ZMQ_DEALER socket. Extends the request/reply pattern by load-balancing outgoing messages
    to all connected peers and by fair-queuing incoming messages from all connected peers.
    </summary><returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_DEALER socket.</returns><remarks>
    When connected to a ZMQ_REP socket, each message sent must consist of an empty message part,
    the delimiter, followed by one or more data parts.
    </remarks><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreatePairSocket">
            <summary>
    Create a ZMQ_PAIR socket. Unrestricted and unfiltered communication with a single remote endpoint.
    </summary><returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_PAIR socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreatePublishExtSocket">
            <summary>
    Create a ZMQ_XPUB socket. Extends Publish socket by allowing incoming subscription messages.
    </summary><returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_XPUB socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreatePublishSocket">
            <summary>
    Create a ZMQ_PUB socket. Publish messages to connected peers in a fan-out model.
    </summary><returns>An <see cref="T:ZeroMQ.ISendSocket"/> instance for a ZMQ_PUB socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreatePullSocket">
            <summary>
    Create a ZMQ_PULL socket. Used by a pipeline node to receive messages from upstream pipeline nodes
    </summary><returns>An <see cref="T:ZeroMQ.IReceiveSocket"/> instance for a ZMQ_PULL socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreatePushSocket">
            <summary>
    Create a ZMQ_PUSH socket. Used by a pipeline node to send messages to downstream pipeline nodes.
    </summary><returns>An <see cref="T:ZeroMQ.ISendSocket"/> instance for a ZMQ_PUSH socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreateReplyExtSocket">
            <summary>
    Create a ZMQ_XREP socket. Extends the Reply socket by identity-stamping incoming messages so that
    outgoing messages can be correctly routed.
    </summary><returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_XREP socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreateReplySocket">
            <summary>
    Create a ZMQ_REP socket. Receive requests from and sends replies to a client.
    </summary><returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_REP socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreateRequestExtSocket">
            <summary>
    Create a ZMQ_XREQ socket. Extends the Request socket by load-balancing outgoing messages and
    fair-queuing incoming messages.
    </summary><returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_XREQ socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreateRequestSocket">
            <summary>
    Create a ZMQ_REQ socket. Used by a client to send requests to and receive replies from a service.
    </summary><returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_REQ socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreateRouterSocket">
            <summary>
    Create a ZMQ_ROUTER socket. Extends the request/reply pattern by fair-queuing incoming messages
    from all connected peers.
    </summary><returns>An <see cref="T:ZeroMQ.IDuplexSocket"/> instance for a ZMQ_DEALER socket.</returns><remarks>
      <para>
      Incoming messages are prepended with a message part containing an identifier that represents the
      sending socket. When sending replies, the application must send a message part containing
      recipient's identity, followed by any remaining message parts.
      </para>
      <para>
      When connected to a ZMQ_REQ socket, received messages also contain an empty delimiter between the
      sender's identity and the message contents. The application must also include an empty delimiter
      between the recipient's identity and the message parts when sending replies.
      </para>
    </remarks><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreateSubscribeExtSocket">
            <summary>
    Create a ZMQ_XSUB socket. Extends Subscribe socket by allowing outgoing subscription messages to be sent.
    Set a subscription filter via <see cref="M:ZeroMQ.ISubscribeSocket.Subscribe(System.Byte[])"/> or <see cref="M:ZeroMQ.ISubscribeSocket.SubscribeAll"/>
    before connecting to a publisher.
    </summary><returns>An <see cref="T:ZeroMQ.ISubscribeSocket"/> instance for a ZMQ_XSUB socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreateSubscribeSocket">
            <summary>
    Create a ZMQ_SUB socket. Subscribe to data distributed by a publisher. Set a subscription filter
    via <see cref="M:ZeroMQ.ISubscribeSocket.Subscribe(System.Byte[])"/> or <see cref="M:ZeroMQ.ISubscribeSocket.SubscribeAll"/>
    before connecting to a publisher.
    </summary><returns>An <see cref="T:ZeroMQ.ISubscribeSocket"/> instance for a ZMQ_SUB socket.</returns><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.CreatePollSet(System.Collections.Generic.IEnumerable{ZeroMQ.ISocket})">
            <summary>
    Create a concrete <see cref="T:ZeroMQ.IPollSet"/> instance over a set of sockets.
    </summary><param name="sockets">
    The set of <see cref="T:ZeroMQ.ISocket"/>s to multiplex. Set <see cref="E:ZeroMQ.IReceiveSocket.ReceiveReady"/>
    and/or <see cref="E:ZeroMQ.ISendSocket.SendReady"/> as appropriate on each socket prior to calling Poll.
    </param><returns>An <see cref="T:ZeroMQ.IPollSet"/> instance for a given socket set.</returns>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.Terminate">
            <summary>
    Terminate the ZeroMQ context.
    </summary><remarks>
    Context termination is performed in the following steps:

    <ul>
      <li>
        Any blocking operations currently in progress on sockets open within context shall return immediately
        with an error code of ETERM. With the exception of <see cref="M:ZeroMQ.Sockets.ZmqSocket.Close"/>, any further operations
        on sockets open within the context shall fail with a <see cref="T:ZeroMQ.Sockets.ZmqSocketException"/>.
      </li>
      <li>
        After interrupting all blocking calls, <see cref="M:ZeroMQ.Sockets.ZmqContext.Terminate"/> shall block until the following conditions
        are met:
        <ul>
          <li>
            All sockets open within the context have been closed with <see cref="M:ZeroMQ.Sockets.ZmqSocket.Close"/>.
          </li>
          <li>
            For each socket within the context, all messages sent by the application  have either been
            physically transferred to a network peer, or the socket's linger period set with the
            <see cref="P:ZeroMQ.Sockets.ZmqSocket.Linger"/> socket option has expired.
          </li>
        </ul>
      </li>
    </ul>
    </remarks><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqContext"/> has already been disposed.
    </exception><exception cref="T:ZeroMQ.Sockets.ZmqLibException">
      An error occurred creating the socket.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqContext.Dispose">
            <summary>
            Frees the underlying ZeroMQ context handle.
            </summary>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqContext.DefaultEncoding">
            <summary>
            Gets or sets the default encoding for all sockets in the current process
            </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.ZmqLibException">
            <summary>
            An exception thrown by the result of a ZeroMQ library call.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqLibException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.ZmqLibException"/> class.
            </summary>
            <param name="errorCode">The error code returned by the ZeroMQ library call.</param>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqLibException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.ZmqLibException"/> class.
            </summary>
            <param name="errorCode">The error code returned by the ZeroMQ library call.</param>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqLibException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.ZmqLibException"/> class.
            </summary>
            <param name="errorCode">The error code returned by the ZeroMQ library call.</param>
            <param name="message">The message that describes the error</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqLibException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.ZmqLibException"/> class.
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode">
            <summary>
            Gets the error code returned by the ZeroMQ library call.
            </summary>
        </member>
        <member name="P:ZeroMQ.Sockets.ZmqLibException.ErrorName">
            <summary>
            Gets the string representation of the error code, as found in the ZeroMQ docs.
            </summary>
        </member>
        <member name="T:ZeroMQ.Sockets.ZmqPollSet">
            <summary>
    Multiplexes input/output events in a level-triggered fashion over a set of sockets.
    </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqPollSet.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:ZeroMQ.Sockets.ZmqPollSet"/> class.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqPollSet.Poll">
            <summary>
    Multiplex input/output events over the contained set of sockets in blocking mode, firing
    <see cref="E:ZeroMQ.IReceiveSocket.ReceiveReady"/> or <see cref="E:ZeroMQ.ISendSocket.SendReady"/> as appropriate.
    </summary><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred polling for socket events.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqPollSet"/> has already been disposed.
    </exception>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqPollSet.Poll(System.TimeSpan)">
            <summary>
    Multiplex input/output events over the contained set of sockets in non-blocking mode, firing
    <see cref="E:ZeroMQ.IReceiveSocket.ReceiveReady"/> or <see cref="E:ZeroMQ.ISendSocket.SendReady"/> as appropriate.
    Returns when one or more events are ready to fire or when the specified timeout elapses, whichever
    comes first.
    </summary><param name="timeout">A <see cref="T:System.TimeSpan"/> indicating the timeout value.</param><exception cref="T:ZeroMQ.Sockets.ZmqSocketException">
      An error occurred polling for socket events.
      See <see cref="P:ZeroMQ.Sockets.ZmqLibException.ErrorCode"/> and <see cref="P:System.Exception.Message"/> for details.
    </exception><exception cref="T:System.ObjectDisposedException">
      The <see cref="T:ZeroMQ.Sockets.ZmqPollSet"/> has already been disposed.
    </exception>
        </member>
        <member name="T:ZeroMQ.Sockets.ZmqSocketException">
            <summary>
            The exception that is thrown when a ZeroMQ socket error occurs.
            </summary>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocketException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.ZmqSocketException"/> class.
            </summary>
            <param name="errorCode">The error code returned by the ZeroMQ library call.</param>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocketException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.ZmqSocketException"/> class.
            </summary>
            <param name="errorCode">The error code returned by the ZeroMQ library call.</param>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocketException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.ZmqSocketException"/> class.
            </summary>
            <param name="errorCode">The error code returned by the ZeroMQ library call.</param>
            <param name="message">The message that describes the error</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:ZeroMQ.Sockets.ZmqSocketException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ZeroMQ.Sockets.ZmqSocketException"/> class.
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
    </members>
</doc>
